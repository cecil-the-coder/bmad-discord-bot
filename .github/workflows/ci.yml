name: Continuous Integration

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-24.04-arm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc musl-dev sqlite3 libsqlite3-dev

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      run: |
        # Install staticcheck manually for ARM64
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Run tests with coverage
      env:
        CGO_ENABLED: 1
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total test coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 55" | bc -l) )); then
          echo "Test coverage is below 55% requirement"
          exit 1
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-24.04-arm
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc musl-dev sqlite3 libsqlite3-dev

    - name: Build application
      env:
        CGO_ENABLED: 1
        GOOS: linux
      run: |
        go build -a -installsuffix cgo -ldflags='-w -s' -o main cmd/bot/main.go

    - name: Test health check functionality
      run: |
        timeout 10s ./main --health-check || [ $? -eq 124 ] && echo "Health check runs without crashing"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (validation only)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: bmad-discord-bot:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-24.04-arm
    needs: test
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif